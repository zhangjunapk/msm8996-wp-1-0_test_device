#===============================================================================
#
# GENERAL DESCRIPTION
#    Public build script for SPI BUS driver.
#
# Copyright (c) 2009-2014 by QUALCOMM, Incorporated.
# All Rights Reserved.
# Qualcomm Confidential and Proprietary
#
#-------------------------------------------------------------------------------
#
#  $Header: //components/rel/core.tz/1.0.3.c1/buses/spi/build/SConscript#1 $
#  $DateTime: 2016/12/02 01:46:26 $
#  $Author: pwbldsvc $
#  $Change: 11896995 $
#                      EDIT HISTORY FOR FILE
#                      
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#  
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 08/13/14   ms      Compile SPI by default
# 05/30/14   ms      Added 8996 support.
# 06/12/12   ddk     Added requirements to compile for specific images.
# 06/03/12   ddk     Added 9625 support.
# 04/16/12   ddk     Added updates for dev config settings.
# 03/27/12   ddk     Added path for hwengines.
# 02/09/12   ag      Fixed the location where the object files are built.
# 01/21/12   ag      Initial release
#
#===============================================================================
import os

Import('env')
#-------------------------------------------------------------------------------
# Load sub scripts
#-------------------------------------------------------------------------------
env.LoadSoftwareUnits()


#-------------------------------------------------------------------------------
# Source PATH
#-------------------------------------------------------------------------------
env = env.Clone()
#print env
# Additional defines
env.Append(CPPDEFINES = ["FEATURE_LIBRARY_ONLY"])   

SRCPATH = "../src"
IMAGES = []

env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0) 

CBSP_APIS = []
SPI_CONFIG_XML = []

#-------------------------------------------------------------------------------
# Publish Private APIs
#-------------------------------------------------------------------------------
env.PublishPrivateApi('BUSES_SPI_DEVICE', [
   '${INC_ROOT}/core/buses/spi/hw',
   '${INC_ROOT}/core/buses/spi/inc',
   '${INC_ROOT}/core/buses/spi/src/hal/inc',
   '${INC_ROOT}/core/buses/spi/src/logs/inc/',
   '${INC_ROOT}/core/buses/spi/src/device/inc',
   '${INC_ROOT}/core/buses/qup/hw',
   '${INC_ROOT}/core/buses/qup/inc',
   '${INC_ROOT}/core/buses/qup/src/hal/inc',   
])

#-------------------------------------------------------------------------------
# Internal depends within CoreBSP
#-------------------------------------------------------------------------------
CBSP_APIS += [
   'BUSES',
   'DAL',
   'HAL',
   'SYSTEMDRIVERS',
   'KERNEL',   
   'SERVICES',   
   'HWENGINES',
   'SECUREMSM',
]

env.RequirePublicApi(CBSP_APIS)
env.RequireRestrictedApi(CBSP_APIS)
if env.has_key('ADSP_PROC'):
      IMAGES = ['QDSP6_SW_IMAGE', 'CBSP_QDSP6_SW_IMAGE']
elif env.has_key('ADSP_PROC'):
      IMAGES = ['QDSP6_SW_IMAGE', 'CBSP_QDSP6_SW_IMAGE']
elif env.has_key('MODEM_PROC'):
      IMAGES = ['QDSP6_SW_IMAGE', 'CBSP_QDSP6_SW_IMAGE']
elif env.has_key('TZOS_IMAGE'):
      IMAGES = ['TZOS_IMAGE']
else:
   Return();      

if env.has_key('TZOS_IMAGE'):
   IMAGES = ['TZOS_IMAGE'] 
   if os.path.isfile(env.subst("../config/spi_props_tz_${MSM_ID}.xml")):
      env.Replace(SPI_CONFIG_XML = 'spi_props_tz_${MSM_ID}.xml')
   else:
      env.Replace(SPI_CONFIG_XML = 'spi_props_tz_stubs.xml')
      env.PrintWarning("SPI devcfg not implemented... using stubs.")
else:
   Return();   
#-------------------------------------------------------------------------------
# Sources, libraries
#-------------------------------------------------------------------------------
SPI_DEVICE_GLOB_FILES = env.GlobFiles('../src/*/*.c', posix=True)

#GLOB returns the relative path name, it needs to replaced with correct build location
SPI_DEVICE_SOURCES = [path.replace(SRCPATH, '${BUILDPATH}') for path in SPI_DEVICE_GLOB_FILES]

#-------------------------------------------------------------------------------
# Add Libraries to image
# env.AddLibrary is a new API, only if the IMAGES is valid in the build env
# the objects will built and added to the image.
#-------------------------------------------------------------------------------
env.AddBinaryLibrary(IMAGES, '${BUILDPATH}/SpiDevice', SPI_DEVICE_SOURCES)

#---------------------------------------------------------------------------
# Device Config
#---------------------------------------------------------------------------
if 'USES_DEVCFG' in env:
   DEVCFG_IMG = ['DAL_DEVCFG_IMG']
   env.AddDevCfgInfo(DEVCFG_IMG, 
   {
      'devcfg_xml'    : '${BUILD_ROOT}/core/buses/spi/config/${SPI_CONFIG_XML}'
   })




   
