#ifndef __IPVC_H
#define __IPVC_H

// AUTOGENERATED FILE: DO NOT EDIT

#include <stdint.h>
#include "object.h"

//  Copyright (c) 2015 Qualcomm Technologies, Inc.  All Rights Reserved.

//  Qualcomm Technologies Proprietary and Confidential.

#define IPVC_INTF_TRIGGER_LEVEL INT32_C(0)
#define IPVC_INTF_TRIGGER_EDGE INT32_C(1)
#define IPVC_INTF_INT_FLAG INT32_C(0)
#define IPVC_INTF_SAVE_INT INT32_C(0x00004000)
#define IPVC_INTF_INT_FLAG_NON_SECURE INT32_C(0x10000000)
#define IPVC_INTF_CPU0_ONLY INT32_C(0x20000000)
#define IPVC_INTF_ALL_CPUS INT32_C(0x40000000)
#define IPVC_INTF_SKIP_INT_CONFIG INT32_C(0x80000000)

#define IPVC_OP_generateIrq 0
#define IPVC_OP_jtagOverride 1
#define IPVC_OP_registerInterrupt 2
#define IPVC_OP_deregisterInterrupt 3
#define IPVC_OP_generateFiq 4
#define IPVC_OP_startTimer 5
#define IPVC_OP_stopTimer 6

static inline int32_t
IPVC_release(Object self)
{
  return Object_invoke(self, Object_OP_release, 0, 0);
}

static inline int32_t
IPVC_retain(Object self)
{
  return Object_invoke(self, Object_OP_retain, 0, 0);
}

static inline int32_t
IPVC_generateIrq(Object self, uint32_t intnum_val)
{
  ObjectArg a[1];
  a[0].b = (ObjectBuf) { &intnum_val, sizeof(uint32_t) };

  return Object_invoke(self, IPVC_OP_generateIrq, a, ObjectCounts_pack(1, 0, 0, 0));
}

static inline int32_t
IPVC_jtagOverride(Object self, uint32_t debug_val)
{
  ObjectArg a[1];
  a[0].b = (ObjectBuf) { &debug_val, sizeof(uint32_t) };

  return Object_invoke(self, IPVC_OP_jtagOverride, a, ObjectCounts_pack(1, 0, 0, 0));
}

static inline int32_t
IPVC_registerInterrupt(Object self, uint32_t intnum_val, uint32_t flags_val, int32_t enable_val, uint32_t *registeredBit_ptr)
{
  ObjectArg a[2];
  struct {
    uint32_t m_intnum;
    uint32_t m_flags;
    int32_t m_enable;
  } i;
  a[0].b = (ObjectBuf) { &i, 12 };
  i.m_intnum = intnum_val;
  i.m_flags = flags_val;
  i.m_enable = enable_val;
  a[1].b = (ObjectBuf) { registeredBit_ptr, sizeof(uint32_t) };

  return Object_invoke(self, IPVC_OP_registerInterrupt, a, ObjectCounts_pack(1, 1, 0, 0));
}

static inline int32_t
IPVC_deregisterInterrupt(Object self, uint32_t intnum_val)
{
  ObjectArg a[1];
  a[0].b = (ObjectBuf) { &intnum_val, sizeof(uint32_t) };

  return Object_invoke(self, IPVC_OP_deregisterInterrupt, a, ObjectCounts_pack(1, 0, 0, 0));
}

static inline int32_t
IPVC_generateFiq(Object self, uint32_t intnum_val)
{
  ObjectArg a[1];
  a[0].b = (ObjectBuf) { &intnum_val, sizeof(uint32_t) };

  return Object_invoke(self, IPVC_OP_generateFiq, a, ObjectCounts_pack(1, 0, 0, 0));
}

static inline int32_t
IPVC_startTimer(Object self, uint32_t timeoutMS_val, uint32_t isPeriodic_val, uint32_t *registeredBit_ptr)
{
  ObjectArg a[2];
  struct {
    uint32_t m_timeoutMS;
    uint32_t m_isPeriodic;
  } i;
  a[0].b = (ObjectBuf) { &i, 8 };
  i.m_timeoutMS = timeoutMS_val;
  i.m_isPeriodic = isPeriodic_val;
  a[1].b = (ObjectBuf) { registeredBit_ptr, sizeof(uint32_t) };

  return Object_invoke(self, IPVC_OP_startTimer, a, ObjectCounts_pack(1, 1, 0, 0));
}

static inline int32_t
IPVC_stopTimer(Object self)
{
  return Object_invoke(self, IPVC_OP_stopTimer, 0, 0);
}


#endif /* __IPVC_H */
