#ifndef __INSMEM_H
#define __INSMEM_H

// AUTOGENERATED FILE: DO NOT EDIT

#include <stdint.h>
#include "object.h"

// Copyright (c) 2015 Qualcomm Technologies, Inc.  All Rights Reserved.

// Qualcomm Technologies Proprietary and Confidential.

#define INSMem_INVALID INT32_C(10)

#define INSMem_OP_isSecureTaggedRange 0
#define INSMem_OP_isNSRange 1
#define INSMem_OP_countMemUsage 2
#define INSMem_OP_tagMem 3

static inline int32_t
INSMem_release(Object self)
{
  return Object_invoke(self, Object_OP_release, 0, 0);
}

static inline int32_t
INSMem_retain(Object self)
{
  return Object_invoke(self, Object_OP_retain, 0, 0);
}

static inline int32_t
INSMem_isSecureTaggedRange(Object self, uint32_t tag_val, uint64_t start_val, uint64_t size_val)
{
  ObjectArg a[1];
  struct {
    uint64_t m_start;
    uint64_t m_size;
    uint32_t m_tag;
  } i;
  a[0].b = (ObjectBuf) { &i, 20 };
  i.m_tag = tag_val;
  i.m_start = start_val;
  i.m_size = size_val;

  return Object_invoke(self, INSMem_OP_isSecureTaggedRange, a, ObjectCounts_pack(1, 0, 0, 0));
}

static inline int32_t
INSMem_isNSRange(Object self, uint64_t start_val, uint64_t size_val)
{
  ObjectArg a[1];
  struct {
    uint64_t m_start;
    uint64_t m_size;
  } i;
  a[0].b = (ObjectBuf) { &i, 16 };
  i.m_start = start_val;
  i.m_size = size_val;

  return Object_invoke(self, INSMem_OP_isNSRange, a, ObjectCounts_pack(1, 0, 0, 0));
}

static inline int32_t
INSMem_countMemUsage(Object self, uint32_t tag_val, uint32_t *usageInPages_ptr)
{
  ObjectArg a[2];
  a[0].b = (ObjectBuf) { &tag_val, sizeof(uint32_t) };
  a[1].b = (ObjectBuf) { usageInPages_ptr, sizeof(uint32_t) };

  return Object_invoke(self, INSMem_OP_countMemUsage, a, ObjectCounts_pack(1, 1, 0, 0));
}

static inline int32_t
INSMem_tagMem(Object self, uint32_t tag_val, uint64_t start_val, uint64_t end_val)
{
  ObjectArg a[1];
  struct {
    uint64_t m_start;
    uint64_t m_end;
    uint32_t m_tag;
  } i;
  a[0].b = (ObjectBuf) { &i, 20 };
  i.m_tag = tag_val;
  i.m_start = start_val;
  i.m_end = end_val;

  return Object_invoke(self, INSMem_OP_tagMem, a, ObjectCounts_pack(1, 0, 0, 0));
}

#endif /* __INSMEM_H */
