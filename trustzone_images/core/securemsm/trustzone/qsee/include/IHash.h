#ifndef __IHASH_H
#define __IHASH_H

// AUTOGENERATED FILE: DO NOT EDIT

#include <stdint.h>
#include "object.h"

// Copyright (c) 2015 Qualcomm Technologies, Inc.  All Rights Reserved.

// Qualcomm Technologies Proprietary and Confidential.

#define IHash_PARAM_MODE INT32_C(0)
#define IHash_PARAM_HMAC_KEY INT32_C(1)
#define IHash_PARAM_SEQ INT32_C(2)
#define IHash_PARAM_INVALID INT32_C(-1)
#define IHash_MODE_HASH INT32_C(0)
#define IHash_MODE_HMAC INT32_C(1)
#define IHash_MODE_INVALID INT32_C(-1)
#define IHash_SEQ_MODE_FIRST INT32_C(0)
#define IHash_SEQ_MODE_LAST INT32_C(1)
#define IHash_SEQ_MODE_INVALID INT32_C(-1)
#define IHash_SIZE_SHA1 INT32_C(20)
#define IHash_SIZE_SHA256 INT32_C(32)
#define IHash_SIZE_INVALID INT32_C(0)

#define IHash_OP_update 0
#define IHash_OP_final 1
#define IHash_OP_setParamAsU32 2
#define IHash_OP_setParamAsData 3
#define IHash_OP_encrypt 4
#define IHash_OP_decrypt 5
#define IHash_OP_reset 6

static inline int32_t
IHash_release(Object self)
{
  return Object_invoke(self, Object_OP_release, 0, 0);
}

static inline int32_t
IHash_retain(Object self)
{
  return Object_invoke(self, Object_OP_retain, 0, 0);
}

static inline int32_t
IHash_update(Object self, const void *plain_ptr, size_t plain_len)
{
  ObjectArg a[1];
  a[0].bi = (ObjectBufIn) { plain_ptr, plain_len * 1 };

  return Object_invoke(self, IHash_OP_update, a, ObjectCounts_pack(1, 0, 0, 0));
}

static inline int32_t
IHash_final(Object self, void *digest_ptr, size_t digest_len, size_t *digest_lenout)
{
  ObjectArg a[1];
  a[0].b = (ObjectBuf) { digest_ptr, digest_len * 1 };

  int32_t result = Object_invoke(self, IHash_OP_final, a, ObjectCounts_pack(0, 1, 0, 0));

  *digest_lenout = a[0].b.size / 1;

  return result;
}

static inline int32_t
IHash_setParamAsU32(Object self, int32_t paramID_val, uint32_t param_val)
{
  ObjectArg a[1];
  struct {
    int32_t m_paramID;
    uint32_t m_param;
  } i;
  a[0].b = (ObjectBuf) { &i, 8 };
  i.m_paramID = paramID_val;
  i.m_param = param_val;

  return Object_invoke(self, IHash_OP_setParamAsU32, a, ObjectCounts_pack(1, 0, 0, 0));
}

static inline int32_t
IHash_setParamAsData(Object self, int32_t paramID_val, const void *param_ptr, size_t param_len)
{
  ObjectArg a[2];
  a[0].b = (ObjectBuf) { &paramID_val, sizeof(int32_t) };
  a[1].bi = (ObjectBufIn) { param_ptr, param_len * 1 };

  return Object_invoke(self, IHash_OP_setParamAsData, a, ObjectCounts_pack(2, 0, 0, 0));
}

static inline int32_t
IHash_encrypt(Object self, Object cipher_obj_val, const void *plain_ptr, size_t plain_len, void *cipher_ptr, size_t cipher_len, size_t *cipher_lenout, void *digest_ptr, size_t digest_len, size_t *digest_lenout)
{
  ObjectArg a[4];
  a[3].o = cipher_obj_val;
  a[0].bi = (ObjectBufIn) { plain_ptr, plain_len * 1 };
  a[1].b = (ObjectBuf) { cipher_ptr, cipher_len * 1 };
  a[2].b = (ObjectBuf) { digest_ptr, digest_len * 1 };

  int32_t result = Object_invoke(self, IHash_OP_encrypt, a, ObjectCounts_pack(1, 2, 1, 0));

  *cipher_lenout = a[1].b.size / 1;
  *digest_lenout = a[2].b.size / 1;

  return result;
}

static inline int32_t
IHash_decrypt(Object self, Object cipher_obj_val, const void *cipher_ptr, size_t cipher_len, void *plain_ptr, size_t plain_len, size_t *plain_lenout, void *digest_ptr, size_t digest_len, size_t *digest_lenout)
{
  ObjectArg a[4];
  a[3].o = cipher_obj_val;
  a[0].bi = (ObjectBufIn) { cipher_ptr, cipher_len * 1 };
  a[1].b = (ObjectBuf) { plain_ptr, plain_len * 1 };
  a[2].b = (ObjectBuf) { digest_ptr, digest_len * 1 };

  int32_t result = Object_invoke(self, IHash_OP_decrypt, a, ObjectCounts_pack(1, 2, 1, 0));

  *plain_lenout = a[1].b.size / 1;
  *digest_lenout = a[2].b.size / 1;

  return result;
}

static inline int32_t
IHash_reset(Object self)
{
  return Object_invoke(self, IHash_OP_reset, 0, 0);
}


#endif /* __IHASH_H */
