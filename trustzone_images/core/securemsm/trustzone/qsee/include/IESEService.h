#ifndef __IESESERVICE_H
#define __IESESERVICE_H

// AUTOGENERATED FILE: DO NOT EDIT

#include <stdint.h>
#include "object.h"

// Copyright (c) 2015 Qualcomm Technologies, Inc.  All Rights Reserved.

// Qualcomm Technologies Proprietary and Confidential.

#define IESEService_STATUS_PENDING_IRQ INT32_C(10)
#define IESEService_STATUS_PENDING_CHANNEL INT32_C(11)
#define IESEService_STATUS_ERROR_BAD_STATE INT32_C(12)
#define IESEService_STATUS_ERROR_BAD_PARAMETERS INT32_C(13)
#define IESEService_STATUS_ERROR_ITEM_NOT_FOUND INT32_C(14)
#define IESEService_STATUS_ERROR_OUT_OF_MEMORY INT32_C(15)
#define IESEService_STATUS_ERROR_COMMUNICATION INT32_C(16)
#define IESEService_STATUS_ERROR_SHORT_BUFFER INT32_C(17)

#define IESEService_OP_start 0
#define IESEService_OP_stop 1
#define IESEService_OP_spiOpen 2
#define IESEService_OP_spiClose 3
#define IESEService_OP_handleOpen 4
#define IESEService_OP_handleClose 5
#define IESEService_OP_transceive 6
#define IESEService_OP_write 7
#define IESEService_OP_read 8

static inline int32_t
IESEService_release(Object self)
{
  return Object_invoke(self, Object_OP_release, 0, 0);
}

static inline int32_t
IESEService_retain(Object self)
{
  return Object_invoke(self, Object_OP_retain, 0, 0);
}

static inline int32_t
IESEService_start(Object self)
{
  return Object_invoke(self, IESEService_OP_start, 0, 0);
}

static inline int32_t
IESEService_stop(Object self)
{
  return Object_invoke(self, IESEService_OP_stop, 0, 0);
}

static inline int32_t
IESEService_spiOpen(Object self, int32_t deviceId_val, uint8_t slaveId_val)
{
  ObjectArg a[1];
  struct {
    int32_t m_deviceId;
    uint8_t m_slaveId;
  } i;
  a[0].b = (ObjectBuf) { &i, 5 };
  i.m_deviceId = deviceId_val;
  i.m_slaveId = slaveId_val;

  return Object_invoke(self, IESEService_OP_spiOpen, a, ObjectCounts_pack(1, 0, 0, 0));
}

static inline int32_t
IESEService_spiClose(Object self, int32_t deviceId_val)
{
  ObjectArg a[1];
  a[0].b = (ObjectBuf) { &deviceId_val, sizeof(int32_t) };

  return Object_invoke(self, IESEService_OP_spiClose, a, ObjectCounts_pack(1, 0, 0, 0));
}

static inline int32_t
IESEService_handleOpen(Object self, uint32_t handle_val)
{
  ObjectArg a[1];
  a[0].b = (ObjectBuf) { &handle_val, sizeof(uint32_t) };

  return Object_invoke(self, IESEService_OP_handleOpen, a, ObjectCounts_pack(1, 0, 0, 0));
}

static inline int32_t
IESEService_handleClose(Object self, uint32_t handle_val)
{
  ObjectArg a[1];
  a[0].b = (ObjectBuf) { &handle_val, sizeof(uint32_t) };

  return Object_invoke(self, IESEService_OP_handleClose, a, ObjectCounts_pack(1, 0, 0, 0));
}

static inline int32_t
IESEService_transceive(Object self, uint32_t handle_val, uint32_t timeout_val, const void *capdu_ptr, size_t capdu_len, void *rapdu_ptr, size_t rapdu_len, size_t *rapdu_lenout)
{
  ObjectArg a[3];
  struct {
    uint32_t m_handle;
    uint32_t m_timeout;
  } i;
  a[0].b = (ObjectBuf) { &i, 8 };
  i.m_handle = handle_val;
  i.m_timeout = timeout_val;
  a[1].bi = (ObjectBufIn) { capdu_ptr, capdu_len * 1 };
  a[2].b = (ObjectBuf) { rapdu_ptr, rapdu_len * 1 };

  int32_t result = Object_invoke(self, IESEService_OP_transceive, a, ObjectCounts_pack(2, 1, 0, 0));

  *rapdu_lenout = a[2].b.size / 1;

  return result;
}

static inline int32_t
IESEService_write(Object self, uint32_t handle_val, const void *capdu_ptr, size_t capdu_len)
{
  ObjectArg a[2];
  a[0].b = (ObjectBuf) { &handle_val, sizeof(uint32_t) };
  a[1].bi = (ObjectBufIn) { capdu_ptr, capdu_len * 1 };

  return Object_invoke(self, IESEService_OP_write, a, ObjectCounts_pack(2, 0, 0, 0));
}

static inline int32_t
IESEService_read(Object self, uint32_t handle_val, uint32_t status_val, uint32_t timeout_val, void *rapdu_ptr, size_t rapdu_len, size_t *rapdu_lenout)
{
  ObjectArg a[2];
  struct {
    uint32_t m_handle;
    uint32_t m_status;
    uint32_t m_timeout;
  } i;
  a[0].b = (ObjectBuf) { &i, 12 };
  i.m_handle = handle_val;
  i.m_status = status_val;
  i.m_timeout = timeout_val;
  a[1].b = (ObjectBuf) { rapdu_ptr, rapdu_len * 1 };

  int32_t result = Object_invoke(self, IESEService_OP_read, a, ObjectCounts_pack(1, 1, 0, 0));

  *rapdu_lenout = a[1].b.size / 1;

  return result;
}


#endif /* __IESESERVICE_H */
