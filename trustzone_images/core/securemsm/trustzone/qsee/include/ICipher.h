#ifndef __ICIPHER_H
#define __ICIPHER_H

// AUTOGENERATED FILE: DO NOT EDIT

#include <stdint.h>
#include "object.h"

// Copyright (c) 2015 Qualcomm Technologies, Inc.  All Rights Reserved.

// Qualcomm Technologies Proprietary and Confidential.

#define ICipher_PARAM_KEY INT32_C(0)
#define ICipher_PARAM_IV INT32_C(1)
#define ICipher_PARAM_MODE INT32_C(2)
#define ICipher_PARAM_PAD INT32_C(3)
#define ICipher_PARAM_NONCE INT32_C(4)
#define ICipher_PARAM_XTS_KEY INT32_C(5)
#define ICipher_PARAM_XTS_DU_SIZE INT32_C(6)
#define ICipher_PARAM_CCM_PAYLOAD_LEN INT32_C(7)
#define ICipher_PARAM_CCM_MAC_LEN INT32_C(8)
#define ICipher_PARAM_CCM_HDR_LEN INT32_C(9)
#define ICipher_PARAM_INVALID INT32_C(-1)
#define ICipher_MODE_ECB INT32_C(0)
#define ICipher_MODE_CBC INT32_C(1)
#define ICipher_MODE_CTR INT32_C(2)
#define ICipher_MODE_XTS INT32_C(3)
#define ICipher_MODE_CCM INT32_C(4)
#define ICipher_MODE_CTS INT32_C(5)
#define ICipher_MODE_INVALID INT32_C(-1)
#define ICipher_PAD_ISO10126 INT32_C(0)
#define ICipher_PAD_PKCS7 INT32_C(1)
#define ICipher_PAD_NO_PAD INT32_C(2)
#define ICipher_PAD_INVALID INT32_C(-1)
#define ICipher_AES_BLOCK_SZ INT32_C(0x10)

#define ICipher_OP_setParamAsU32 0
#define ICipher_OP_getParamAsU32 1
#define ICipher_OP_setParamAsData 2
#define ICipher_OP_getParamAsData 3
#define ICipher_OP_encrypt 4
#define ICipher_OP_decrypt 5
#define ICipher_OP_reset 6

static inline int32_t
ICipher_release(Object self)
{
  return Object_invoke(self, Object_OP_release, 0, 0);
}

static inline int32_t
ICipher_retain(Object self)
{
  return Object_invoke(self, Object_OP_retain, 0, 0);
}

static inline int32_t
ICipher_setParamAsU32(Object self, int32_t paramID_val, uint32_t param_val)
{
  ObjectArg a[1];
  struct {
    int32_t m_paramID;
    uint32_t m_param;
  } i;
  a[0].b = (ObjectBuf) { &i, 8 };
  i.m_paramID = paramID_val;
  i.m_param = param_val;

  return Object_invoke(self, ICipher_OP_setParamAsU32, a, ObjectCounts_pack(1, 0, 0, 0));
}

static inline int32_t
ICipher_getParamAsU32(Object self, int32_t paramID_val, uint32_t *param_ptr)
{
  ObjectArg a[2];
  a[0].b = (ObjectBuf) { &paramID_val, sizeof(int32_t) };
  a[1].b = (ObjectBuf) { param_ptr, sizeof(uint32_t) };

  return Object_invoke(self, ICipher_OP_getParamAsU32, a, ObjectCounts_pack(1, 1, 0, 0));
}

static inline int32_t
ICipher_setParamAsData(Object self, int32_t paramID_val, const void *param_ptr, size_t param_len)
{
  ObjectArg a[2];
  a[0].b = (ObjectBuf) { &paramID_val, sizeof(int32_t) };
  a[1].bi = (ObjectBufIn) { param_ptr, param_len * 1 };

  return Object_invoke(self, ICipher_OP_setParamAsData, a, ObjectCounts_pack(2, 0, 0, 0));
}

static inline int32_t
ICipher_getParamAsData(Object self, int32_t paramID_val, void *param_ptr, size_t param_len, size_t *param_lenout)
{
  ObjectArg a[2];
  a[0].b = (ObjectBuf) { &paramID_val, sizeof(int32_t) };
  a[1].b = (ObjectBuf) { param_ptr, param_len * 1 };

  int32_t result = Object_invoke(self, ICipher_OP_getParamAsData, a, ObjectCounts_pack(1, 1, 0, 0));

  *param_lenout = a[1].b.size / 1;

  return result;
}

static inline int32_t
ICipher_encrypt(Object self, const void *plain_ptr, size_t plain_len, void *cipher_ptr, size_t cipher_len, size_t *cipher_lenout)
{
  ObjectArg a[2];
  a[0].bi = (ObjectBufIn) { plain_ptr, plain_len * 1 };
  a[1].b = (ObjectBuf) { cipher_ptr, cipher_len * 1 };

  int32_t result = Object_invoke(self, ICipher_OP_encrypt, a, ObjectCounts_pack(1, 1, 0, 0));

  *cipher_lenout = a[1].b.size / 1;

  return result;
}

static inline int32_t
ICipher_decrypt(Object self, const void *cipher_ptr, size_t cipher_len, void *plain_ptr, size_t plain_len, size_t *plain_lenout)
{
  ObjectArg a[2];
  a[0].bi = (ObjectBufIn) { cipher_ptr, cipher_len * 1 };
  a[1].b = (ObjectBuf) { plain_ptr, plain_len * 1 };

  int32_t result = Object_invoke(self, ICipher_OP_decrypt, a, ObjectCounts_pack(1, 1, 0, 0));

  *plain_lenout = a[1].b.size / 1;

  return result;
}

static inline int32_t
ICipher_reset(Object self)
{
  return Object_invoke(self, ICipher_OP_reset, 0, 0);
}


#endif /* __ICIPHER_H */
