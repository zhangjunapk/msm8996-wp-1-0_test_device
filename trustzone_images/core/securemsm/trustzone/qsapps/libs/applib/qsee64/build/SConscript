#===============================================================================
#
# TZ applib
#
# GENERAL DESCRIPTION
#    build script
#
#
#-------------------------------------------------------------------------------
#
#  $Header: //components/rel/core.tz/1.0.3.c1/securemsm/trustzone/qsapps/libs/applib/qsee64/build/SConscript#1 $
#  $DateTime: 2016/12/02 01:46:26 $
#  $Author: pwbldsvc $
#  $Change: 11896995 $
#                      EDIT HISTORY FOR FILE
#
#  This section contains schedulerents describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
# when         who     what, where, why
# --------     ---     ---------------------------------------------------------
# 08/19/15     ng      Added secure_ui_sample64
# 08/12/15     kr      Added PlayReady 64-bit support
# 08/07/15     shl     Added CCPF support
# 06/04/15     el      Added qsee_bulletin_board_shim.c file
# 02/10/14     cz      Added qsee_cfg_prop_shim.c file
# 07/16/14     tp      Changed DRM sconscripts to use the prxy_services 
#                      library instead of linking to qsee_services.
# 01/28/14     sa      Add HDCPSRM_IMAGE
# 10/17/13     ib      Add SECUREMM
# 03/11/13     bbs     Add ISDBTMM to TZ common lib
# 01/15/2013   cz      removed drmprov
#===============================================================================
Import('env')
import copy
env = env.Clone()

#-------------------------------------------------------------------------------
# Source PATH
#-------------------------------------------------------------------------------
SRCPATH = "${BUILD_ROOT}/core/securemsm/trustzone/qsapps/libs/applib"

env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

#-------------------------------------------------------------------------------
# Compiler, object, and linker definitions
#-------------------------------------------------------------------------------

# do not generate thumb code for inline assembler code
#env.Append(ARMCC_OPT = ' -marm')


CBSP_API = [
   'SERVICES',
   'DAL',
   'MINK',
   'MINK_LK',
]

env.RequirePublicApi(CBSP_API)
env.RequireRestrictedApi(CBSP_API)

INC_PATH_QSEE_API = ["${INC_ROOT}/core/api/securemsm/trustzone/qsee"]
env.Append(CPPPATH = INC_PATH_QSEE_API)
INC_PATH_MINK_API = ["${INC_ROOT}/core/securemsm/trustzone/qsee/mink/app_mgr/inc"]
env.Append(CPPPATH = INC_PATH_MINK_API)
INC_PATH_QSEE_SRC = ["${INC_ROOT}/core/securemsm/trustzone/qsapps/libs/applib/qsee/src"]
env.Append(CPPPATH = INC_PATH_QSEE_SRC)
INC_PATH_COMDEF = ["${INC_ROOT}/core/api/services"]
env.Append(CPPPATH = INC_PATH_COMDEF)
INC_PATH_SYSCALL = ["${INC_ROOT}/core/securemsm/trustzone/qsee/include"]
env.Append(CPPPATH = INC_PATH_SYSCALL)
INC_PATH_CTZLIB = ["${INC_ROOT}/core/securemsm/trustzone/qsapps/libs/applib/common/src",
                   "${INC_ROOT}/core/securemsm/trustzone/qsapps/libs/services/src",
                   "${INC_ROOT}/core/api/kernel/libstd/stringl",]
env.Append(CPPPATH = INC_PATH_CTZLIB)
INC_PATH_KER = ["${INC_ROOT}/core/api/kernel/libstd"]
env.Append(CPPPATH = INC_PATH_KER)
INC_PATH_COMMON_APPLIB = ["${INC_ROOT}/core/securemsm/trustzone/qsapps/libs/applib/common_applib/src"]
env.Append(CPPPATH = INC_PATH_COMMON_APPLIB)
INC_PATH_MACC = [
        "${INC_ROOT}/core/api/securemsm/trustzone/qsee",
        "${INC_ROOT}/core/securemsm/trustzone/qsapps/libs/services/src",
        "${INC_ROOT}/core/securemsm/trustzone/qsee/services/keyprov/macchiato/shared/inc",
]
env.Append(CPPPATH = INC_PATH_MACC)
INC_PATH_GP_API = ["${INC_ROOT}/core/api/securemsm/trustzone/gp"]
env.Append(CPPPATH = INC_PATH_GP_API)
INC_PATH_GP_PO_API = ["${INC_ROOT}/core/securemsm/trustzone/qsapps/libs/applib/common_applib/inc/"]
env.Append(CPPPATH = INC_PATH_GP_PO_API)
INC_PATH_GP_SRC = ["${INC_ROOT}/core/securemsm/trustzone/qsapps/libs/applib/gp/src/"]
env.Append(CPPPATH = INC_PATH_GP_SRC)
INC_PATH_GP_INC = ["${INC_ROOT}/core/securemsm/trustzone/qsapps/libs/applib/gp/inc/"]
env.Append(CPPPATH = INC_PATH_GP_INC)

#----------------------------------------------------------------------------
# TZ Exec Shared Objects
#----------------------------------------------------------------------------
LIB_ENTRY_SOURCES = [
    '${BUILDPATH}/qsee64/src/kthread_shared.s',
    '${BUILDPATH}/qsee/src/mink_shared_code.c',
    '${BUILDPATH}/qsee/src/qsee_env.c',
    '${BUILDPATH}/qsee/src/qsee_core_shim.c',
    '${BUILDPATH}/qsee/src/qsee_deviceid.c',
    '${BUILDPATH}/qsee/src/qsee_prng.c',
    '${BUILDPATH}/qsee/src/qsee_secdisp.c',
    '${BUILDPATH}/qsee/src/qsee_nsmem.c',
    '${BUILDPATH}/qsee/src/qsee_cmac.c',
    '${BUILDPATH}/qsee/src/qsee_crypto_shim.c',
    '${BUILDPATH}/qsee/src/qsee_timer_shim.c',
    '${BUILDPATH}/qsee/src/qsee_boot_shim.c',
    '${BUILDPATH}/qsee/src/qsee_int_shim.c',
    '${BUILDPATH}/qsee/src/qsee_ese_service.c',
    '${BUILDPATH}/qsee/src/qsee_securechannel_shim.c',
    '${BUILDPATH}/qsee64/src/tzapp_syscall.s',
    '${BUILDPATH}/qsee/src/qsee_comstr.c',
    '${BUILDPATH}/qsee/src/stor.c',
    '${BUILDPATH}/qsee/src/stor_gpt.c',
    '${BUILDPATH}/qsee/src/stor_rpmbw.c',
    '${BUILDPATH}/qsee/src/qsee_counter_shim.c',
    '${BUILDPATH}/qsee/src/qsee_cfg_prop_shim.c',
    '${BUILDPATH}/qsee/src/qsee_keyprov.c',
    '${BUILDPATH}/qsee/src/qsee_cipher.c',
    '${BUILDPATH}/qsee/src/qsee_hash.c',
    '${BUILDPATH}/qsee/src/qsee_hmac.c',
    '${BUILDPATH}/qsee/src/qsee_km_shim.c',
    '${BUILDPATH}/qsee/src/qsee_i2c.c',
    '${BUILDPATH}/qsee/src/qsee_spi.c',
    '${BUILDPATH}/qsee/src/qsee_tlmm.c',
    '${BUILDPATH}/qsee/src/qsee_hw_fuse.c',
    '${BUILDPATH}/qsee/src/qsee_bulletin_board_shim.c',
    '${BUILDPATH}/qsee/src/qsee_dcache.c',
    '${BUILDPATH}/qsee/src/qsee_shared_buffer.c',
    '${BUILDPATH}/qsee/src/qsee_ontario_shim.c',
    '${BUILDPATH}/qsee/src/qsee_sync.c',
    '${BUILDPATH}/qsee/src/qsee_oem_buffer.c',
    '${BUILDPATH}/qsee/src/qsee_intmask.c',
    '${BUILDPATH}/qsee/src/qsee_trans_ns_addr.c',
    '${BUILDPATH}/qsee/src/qsee_appmessage.c',
]
IMG_ENTRY_SOURCES = [
    '${BUILDPATH}/qsee64/src/tzapp_entry.s',
]

# For sfs, we need to include gp wrappers
# When GP goes to 64 bit, put deep copy above this point
LIB_ENTRY_SOURCES += [ '${BUILDPATH}/qsee/src/sfs_api.c',]
LIB_ENTRY_SOURCES += [ '${BUILDPATH}/qsee/src/gpPersistObjPanic.c',]

if env.has_key('SAMPLEAPP64_IMAGE'):
   LIB_ENTRY_SOURCES += [ '${BUILDPATH}/qsee/src/tzapp_lib_main.c',]
elif env.has_key('QPAY64_IMAGE'):
   LIB_ENTRY_SOURCES += [ '${BUILDPATH}/qsee/src/tzapp_lib_main.c',]
elif env.has_key('APTTESTAPP64_IMAGE'):
   LIB_ENTRY_SOURCES += [ '${BUILDPATH}/qsee/src/tzapp_lib_main.c',]
elif env.has_key('ASSURANCETEST64_IMAGE'):
   LIB_ENTRY_SOURCES += [ '${BUILDPATH}/qsee/src/tzapp_lib_main.c',]
elif env.has_key('APTLKSECAPP64_IMAGE'):
   LIB_ENTRY_SOURCES += [ '${BUILDPATH}/qsee/src/tzapp_lib_main.c',]
elif env.has_key('APTCRYPTOTESTAPP64_IMAGE'):
   LIB_ENTRY_SOURCES += [ '${BUILDPATH}/qsee/src/tzapp_lib_main.c',]
elif env.has_key('LKSECAPP64_IMAGE'):
   LIB_ENTRY_SOURCES += [ '${BUILDPATH}/qsee/src/tzapp_lib_main.c',]
elif env.has_key('SKELETON_IMAGE'):
   LIB_ENTRY_SOURCES += [ '${BUILDPATH}/qsee/src/tzapp_lib_main.c',]
elif env.has_key('CRIKEYMGMTAPP64_IMAGE'):
   LIB_ENTRY_SOURCES += [ '${BUILDPATH}/qsee/src/tzapp_lib_main.c',]
elif env.has_key('WIDEVINE_IMAGE'):
   LIB_ENTRY_SOURCES += [ '${BUILDPATH}/qsee/src/tzapp_lib_main.c',]
elif env.has_key('PLAYREADY_IMAGE'):
   LIB_ENTRY_SOURCES += [ '${BUILDPATH}/qsee/src/tzapp_lib_main.c',]
elif env.has_key('CPPF_IMAGE'):
   LIB_ENTRY_SOURCES += [ '${BUILDPATH}/qsee/src/tzapp_lib_main.c',]
elif env.has_key('DXHDCP2_IMAGE'):
   LIB_ENTRY_SOURCES += [ '${BUILDPATH}/qsee/src/tzapp_lib_main.c',]
elif env.has_key('DXHDCP2DBG_IMAGE'):
   LIB_ENTRY_SOURCES += [ '${BUILDPATH}/qsee/src/tzapp_lib_main.c',]
elif env.has_key('MACCHIATO_SAMPLE_IMAGE'):
   LIB_ENTRY_SOURCES += [ '${BUILDPATH}/qsee/src/tzapp_lib_main.c',] 
elif env.has_key('CHAMOMILE_IMAGE'):
   LIB_ENTRY_SOURCES += [ '${BUILDPATH}/qsee/src/tzapp_lib_main.c',]
elif env.has_key('FIDOCRYPTO_IMAGE'):
   LIB_ENTRY_SOURCES += [ '${BUILDPATH}/qsee/src/tzapp_lib_main.c',]
elif env.has_key('FIDOCONFIG_IMAGE'):
   LIB_ENTRY_SOURCES += [ '${BUILDPATH}/qsee/src/tzapp_lib_main.c',]
elif env.has_key('SAMPLEAUTH_IMAGE'):
   LIB_ENTRY_SOURCES += [ '${BUILDPATH}/qsee/src/tzapp_lib_main.c',]
elif env.has_key('SECUREMM_IMAGE'):
   LIB_ENTRY_SOURCES += [ '${BUILDPATH}/qsee/src/tzapp_lib_main.c',]   
elif env.has_key('SAMPLEEXTAUTH_IMAGE'):
   LIB_ENTRY_SOURCES += [ '${BUILDPATH}/qsee/src/tzapp_lib_main.c',]
elif env.has_key('MDTP_IMAGE'):
   LIB_ENTRY_SOURCES += [ '${BUILDPATH}/qsee/src/tzapp_lib_main.c',]
elif env.has_key('FINGERPRINT64_IMAGE'):
   LIB_ENTRY_SOURCES += [ '${BUILDPATH}/qsee/src/tzapp_lib_main.c',]   
elif env.has_key('SECUREUISAMPLE64_IMAGE'):
   LIB_ENTRY_SOURCES += [ '${BUILDPATH}/qsee/src/tzapp_lib_main.c',]
elif env.has_key('SECOTACL_IMAGE'):
   LIB_ENTRY_SOURCES += [ '${BUILDPATH}/qsee/src/tzapp_lib_main.c',]    
else:
   LIB_ENTRY_SOURCES += [ '${BUILDPATH}/qsee/src/tzapp_lib_main_legacy.c',]


#-------------------------------------------------------------------------------
# Add Libraries to image
#-------------------------------------------------------------------------------
env.AddBinaryObject('SAMPLEAPP64_IMAGE', IMG_ENTRY_SOURCES)
env.AddBinaryLibrary('SAMPLEAPP64_IMAGE', '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)

env.AddBinaryObject('QPAY64_IMAGE', IMG_ENTRY_SOURCES)
env.AddBinaryLibrary('QPAY64_IMAGE', '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)

env.AddBinaryObject('APTTESTAPP64_IMAGE', IMG_ENTRY_SOURCES)
env.AddBinaryLibrary('APTTESTAPP64_IMAGE', '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)

env.AddBinaryObject('ASSURANCETEST64_IMAGE', IMG_ENTRY_SOURCES)
env.AddBinaryLibrary('ASSURANCETEST64_IMAGE', '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)

env.AddBinaryObject('APTLKSECAPP64_IMAGE', IMG_ENTRY_SOURCES)
env.AddBinaryLibrary('APTLKSECAPP64_IMAGE', '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)

env.AddBinaryObject('APTCRYPTOTESTAPP64_IMAGE', IMG_ENTRY_SOURCES)
env.AddBinaryLibrary('APTCRYPTOTESTAPP64_IMAGE', '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)

env.AddBinaryObject('LKSECAPP64_IMAGE', IMG_ENTRY_SOURCES)
env.AddBinaryLibrary('LKSECAPP64_IMAGE', '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)

env.AddBinaryObject('SKELETON_IMAGE', IMG_ENTRY_SOURCES)
env.AddBinaryLibrary('SKELETON_IMAGE', '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)

env.AddBinaryObject('CRIKEYMGMTAPP64_IMAGE', IMG_ENTRY_SOURCES)
env.AddBinaryLibrary('CRIKEYMGMTAPP64_IMAGE', '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)

env.AddBinaryObject('WIDEVINE_IMAGE', IMG_ENTRY_SOURCES)
env.AddBinaryLibrary('WIDEVINE_IMAGE', '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)

env.AddBinaryObject('PLAYREADY_IMAGE', IMG_ENTRY_SOURCES)
env.AddBinaryLibrary('PLAYREADY_IMAGE', '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)

env.AddBinaryObject('CPPF_IMAGE', IMG_ENTRY_SOURCES)
env.AddBinaryLibrary('CPPF_IMAGE', '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)

env.AddBinaryObject('DXHDCP2_IMAGE', IMG_ENTRY_SOURCES)
env.AddBinaryLibrary('DXHDCP2_IMAGE', '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)

env.AddBinaryObject('DXHDCP2DBG_IMAGE', IMG_ENTRY_SOURCES)
env.AddBinaryLibrary('DXHDCP2DBG_IMAGE', '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)

env.AddBinaryObject('MACCHIATO_SAMPLE_IMAGE', IMG_ENTRY_SOURCES)
env.AddBinaryLibrary('MACCHIATO_SAMPLE_IMAGE', '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)

env.AddBinaryObject('CHAMOMILE_IMAGE', IMG_ENTRY_SOURCES)
env.AddBinaryLibrary('CHAMOMILE_IMAGE', '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)

env.AddBinaryObject('FIDOCRYPTO_IMAGE', IMG_ENTRY_SOURCES)
env.AddBinaryLibrary('FIDOCRYPTO_IMAGE', '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)

env.AddBinaryObject('FIDOCONFIG_IMAGE', IMG_ENTRY_SOURCES)
env.AddBinaryLibrary('FIDOCONFIG_IMAGE', '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)

env.AddBinaryObject('SAMPLEAUTH_IMAGE', IMG_ENTRY_SOURCES)
env.AddBinaryLibrary('SAMPLEAUTH_IMAGE', '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)

env.AddBinaryObject('SECUREMM_IMAGE', IMG_ENTRY_SOURCES)
env.AddBinaryLibrary('SECUREMM_IMAGE', '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)

env.AddBinaryObject('SAMPLEEXTAUTH_IMAGE', IMG_ENTRY_SOURCES)
env.AddBinaryLibrary('SAMPLEEXTAUTH_IMAGE', '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)

env.AddBinaryObject('MDTP_IMAGE', IMG_ENTRY_SOURCES)
env.AddBinaryLibrary('MDTP_IMAGE', '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)

env.AddBinaryObject('FINGERPRINT64_IMAGE', IMG_ENTRY_SOURCES)
env.AddBinaryLibrary('FINGERPRINT64_IMAGE', '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)

env.AddBinaryObject('SECUREUISAMPLE64_IMAGE', IMG_ENTRY_SOURCES)
env.AddBinaryLibrary('SECUREUISAMPLE64_IMAGE', '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)

env.AddBinaryObject('SECOTACL_IMAGE', IMG_ENTRY_SOURCES)
env.AddBinaryLibrary('SECOTACL_IMAGE', '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)

#-------------------------------------------------------------------------------
# Load sub scripts
#-------------------------------------------------------------------------------
env.LoadSoftwareUnits()
