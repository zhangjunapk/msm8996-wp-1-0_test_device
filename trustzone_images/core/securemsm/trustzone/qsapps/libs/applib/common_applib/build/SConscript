#===============================================================================
#
# common_applib
#
# GENERAL DESCRIPTION
#    build script
#
#
#-------------------------------------------------------------------------------
#
#  $Header: //components/rel/core.tz/1.0.3.c1/securemsm/trustzone/qsapps/libs/applib/common_applib/build/SConscript#1 $
#  $DateTime: 2016/12/02 01:46:26 $
#  $Author: pwbldsvc $
#  $Change: 11896995 $
#                      EDIT HISTORY FOR FILE
#
#  This section contains schedulerents describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
# when         who     what, where, why
# --------     ---     ---------------------------------------------------------
# 08/10/15     dc      Added QPAY app
# 01/27/2015   sg      initial versio
#===============================================================================
Import('env')
import copy
env = env.Clone()

#-------------------------------------------------------------------------------
# Source PATH
#-------------------------------------------------------------------------------
SRCPATH = "${BUILD_ROOT}/core/securemsm/trustzone/qsapps/libs/applib/common_applib"

env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

#-------------------------------------------------------------------------------
# Compiler, object, and linker definitions
#-------------------------------------------------------------------------------

# do not generate thumb code for inline assembler code
#env.Append(ARMCC_OPT = ' -marm')


CBSP_API = [
   'SERVICES',
   'DAL',
   'MINK',
   'MINK_LK',
]

env.RequirePublicApi(CBSP_API)
env.RequireRestrictedApi(CBSP_API)

INC_PATH_QSEE_API = ["${INC_ROOT}/core/api/securemsm/trustzone/qsee"]
env.Append(CPPPATH = INC_PATH_QSEE_API)
INC_PATH_GP_API = ["${INC_ROOT}/core/api/securemsm/trustzone/gp"]
env.Append(CPPPATH = INC_PATH_GP_API)
INC_PATH_QSEE_SRC = ["${INC_ROOT}/core/securemsm/trustzone/qsapps/libs/applib/qsee/src"]
env.Append(CPPPATH = INC_PATH_QSEE_SRC)
INC_PATH_COMDEF = ["${INC_ROOT}/core/api/services"]
env.Append(CPPPATH = INC_PATH_COMDEF)
INC_PATH_SYSCALL = ["${INC_ROOT}/core/securemsm/trustzone/qsee/include"]
env.Append(CPPPATH = INC_PATH_SYSCALL)
INC_PATH_CTZLIB = ["${INC_ROOT}/core/securemsm/trustzone/qsapps/libs/applib/common/src",
                   "${INC_ROOT}/core/securemsm/trustzone/qsapps/libs/services/src",
                   "${INC_ROOT}/core/api/kernel/libstd/stringl",]
env.Append(CPPPATH = INC_PATH_CTZLIB)
INC_PATH_KER = ["${INC_ROOT}/core/api/kernel/libstd"]
env.Append(CPPPATH = INC_PATH_KER)
INC_PATH_GP_PO_API = ["${INC_ROOT}/core/securemsm/trustzone/qsapps/libs/applib/common_applib/inc/"]
env.Append(CPPPATH = INC_PATH_GP_PO_API)
INC_PATH_GP_SRC = ["${INC_ROOT}/core/securemsm/trustzone/qsapps/libs/applib/gp/src/"]
env.Append(CPPPATH = INC_PATH_GP_SRC)
INC_PATH_GP_INC = ["${INC_ROOT}/core/securemsm/trustzone/qsapps/libs/applib/gp/inc/"]
env.Append(CPPPATH = INC_PATH_GP_INC)

#----------------------------------------------------------------------------
# TZ Exec Shared Objects
#----------------------------------------------------------------------------
LIB_ENTRY_SOURCES = [
    '${BUILDPATH}/src/common_applib.c',
    '${BUILDPATH}/src/gpFileService.c',
    '${BUILDPATH}/src/gpPersistObjCommon.c',
    '${BUILDPATH}/src/gpPersistObjCrypto.c',
    '${BUILDPATH}/src/gpPersistObjFileIO.c',
    '${BUILDPATH}/src/gpPersistentObjects.c',
    '${BUILDPATH}/src/gpPersistObjData.c',
    '${BUILDPATH}/src/gpPersistObjHandler.c',
    '${BUILDPATH}/src/gpPersistObjIndex.c',
    '${BUILDPATH}/src/gpPersistObjVersion.c',
    '${BUILDPATH}/src/gpList.c',
]

#-------------------------------------------------------------------------------
# Add Libraries to image
#-------------------------------------------------------------------------------
env.AddBinaryLibrary('GPSAMPLE',            '${BUILDPATH}/gpapp_lib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('GPTEST_IMAGE',        '${BUILDPATH}/gpapp_lib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('GPTEST2',             '${BUILDPATH}/gpapp_lib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('TTAARI1',             '${BUILDPATH}/gpapp_lib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('TTACAPI1',            '${BUILDPATH}/gpapp_lib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('TTACAPI2',            '${BUILDPATH}/gpapp_lib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('TTACAPI3',            '${BUILDPATH}/gpapp_lib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('TTACAPI4',            '${BUILDPATH}/gpapp_lib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('TTACAPI5',            '${BUILDPATH}/gpapp_lib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('TTACRP1',             '${BUILDPATH}/gpapp_lib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('TTADS1',              '${BUILDPATH}/gpapp_lib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('TTATIME1',            '${BUILDPATH}/gpapp_lib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('TTATCF1',             '${BUILDPATH}/gpapp_lib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('TTATCF2',             '${BUILDPATH}/gpapp_lib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('TTATCF3',             '${BUILDPATH}/gpapp_lib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('TTATCF4',             '${BUILDPATH}/gpapp_lib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('TTATCF5',             '${BUILDPATH}/gpapp_lib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('SAMPLEAPP_IMAGE',     '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('SAMPLEAPP64_IMAGE',   '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('QMPSECAPP_IMAGE',     '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('KEYMASTER_IMAGE',     '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('ASSURANCETEST_IMAGE', '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('ASSURANCETEST64_IMAGE', '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('APTTESTAPP_IMAGE',    '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('APTTESTAPP64_IMAGE',    '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('APTLKSECAPP_IMAGE',    '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('APTLKSECAPP64_IMAGE',    '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('APTCRYPTOTESTAPP_IMAGE',    '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('APTCRYPTOTESTAPP64_IMAGE',    '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('CRIKEYMGMTAPP_IMAGE',    '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('CRIKEYMGMTAPP64_IMAGE',    '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('MACCHIATO_SAMPLE_IMAGE',   '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('SECURITYTEST_IMAGE',  '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('WINSECAPP_IMAGE',     '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('PLAYREADY_IMAGE',     '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('WIDEVINE_IMAGE',      '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('ISDBTMM_IMAGE',       '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('SECUREMM_IMAGE',      '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('MDTP_IMAGE',      '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('DXHDCP2_IMAGE',       '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('DXHDCP2DBG_IMAGE',    '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('HDCP1_IMAGE',         '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('SECUREUISAMPLE_IMAGE','${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('SECUREUISAMPLE64_IMAGE','${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('SECUREINDICATOR_IMAGE','${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('HDCPSRM_IMAGE',       '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('LKSECAPP_IMAGE',      '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('UEFISECAPP_IMAGE',    '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('SSMAPP_IMAGE',        '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('HDCP2P2_IMAGE',         '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('RETSTAPP_IMAGE',      '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('FINGERPRINT_IMAGE',    '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('FINGERPRINT64_IMAGE',  '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('VOICEPRINT_IMAGE',    '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('IRIS_IMAGE',    '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('FIDOCRYPTO_IMAGE',    '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('FIDOCONFIG_IMAGE',    '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('FIDOSUI_IMAGE',    '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('SAMPLEAUTH_IMAGE',    '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('SAMPLEEXTAUTH_IMAGE',    '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('CHAMOMILE_IMAGE',    '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('SKELETON_IMAGE',      '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('SECOTACL_IMAGE', '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('DHSECAPP_IMAGE',      '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('CPPF_IMAGE', '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('PR_3_0_IMAGE', '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('QPAY_IMAGE',          '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)
env.AddBinaryLibrary('QPAY64_IMAGE',        '${BUILDPATH}/tzapp_entrylib', LIB_ENTRY_SOURCES)

#-------------------------------------------------------------------------------
# Load sub scripts
#-------------------------------------------------------------------------------
env.LoadSoftwareUnits()
