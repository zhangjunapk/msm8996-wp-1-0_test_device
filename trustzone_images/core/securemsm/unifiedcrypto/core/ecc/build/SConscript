#===============================================================================
#
# cryptoLibs
#
# GENERAL DESCRIPTION
#    build script
#
# Copyright (c) 2009-2009 by QUALCOMM, Incorporated.
# All Rights Reserved.
# QUALCOMM Proprietary/GTDR
#
#-------------------------------------------------------------------------------
#
#  $Header: //components/rel/core.tz/1.0.3.c1/securemsm/unifiedcrypto/core/ecc/build/SConscript#1 $
#  $DateTime: 2016/12/02 01:46:26 $
#  $Author: pwbldsvc $
#  $Change: 11896995 $
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 02/23/11   jl	     Removed debug/nodebug from build path.
#
#===============================================================================
Import('env')
env = env.Clone()

#-------------------------------------------------------------------------------
# Source PATH
#-------------------------------------------------------------------------------
SRCPATH = "${BUILD_ROOT}/core/securemsm/unifiedcrypto/core/ecc"

if env.has_key('USES_NO_DEBUG'):
   env.Replace(DBUG_MODE = "NoDebug")
else:
   env.Replace(DBUG_MODE = "Debug")

if env.has_key('IMAGE_NAME'):
   SECUREMSMLIBPATH = '${IMAGE_NAME}/${PROC}/${ARMTOOLS}'
#   SECUREMSMLIBPATH = '${IMAGE_NAME}/${PROC}/${ARMTOOLS}/${DBUG_MODE}'
else:
   SECUREMSMLIBPATH = 'unknown/${PROC}/${ARMTOOLS}'
#   SECUREMSMLIBPATH = 'unknown/${PROC}/${ARMTOOLS}/${DBUG_MODE}'

#env.Replace(SECUREMSMLIBPATH = SECUREMSMLIBPATH)
#env.VariantDir('${SECUREMSMLIBPATH}', SRCPATH, duplicate=0)
env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)


#-------------------------------------------------------------------------------
# Internal depends within CoreBSP
#-------------------------------------------------------------------------------
CBSP_API = [
   'SECUREMSM',
   'SERVICES',
   # needs to be last also contains wrong comdef.h
   'KERNEL',
]

env.RequirePublicApi(CBSP_API)
env.RequireRestrictedApi(CBSP_API)

SME_PROTECTED_API = [
                      'SME_SMECOM',
]
env.RequireProtectedApi(SME_PROTECTED_API)

#-------------------------------------------------------------------------------
# Compiler, object, and linker definitions
#-------------------------------------------------------------------------------

env.Append(ARMCC_CODE = " ${ARM_SPLIT_SECTIONS}")
env.Replace(ARMLD_NOREMOVE_CMD = "")

env.Append(CPPDEFINES = ['_ARM_', '__arm', 'ARM', 'ARM_BREW_BUILD'])
#env.Append(ARMCC_OPT = ' --loose_implicit_cast ')
if env.has_key('BUILD_BOOT_CHAIN'):
   env.Append(CPPDEFINES = ['FEATURE_LIBRARY_ONLY'])

#-------------------------------------------------------------------------------
# Publish Private APIs
#-------------------------------------------------------------------------------
env.PublishPrivateApi('UC_CORE_ECC_API', [
   "${BUILD_ROOT}/core/securemsm/unifiedcrypto/core/ecc/inc",
])

if env.has_key('TZOS_IMAGE'):
    env.PublishPrivateApi('UC_CORE_ECC', [
   '${INC_ROOT}/core/securemsm/unifiedcrypto/core/ecc/inc', 
   '${INC_ROOT}/core/securemsm/unifiedcrypto/shared/ecc/inc',
   '${INC_ROOT}/core/securemsm/unifiedcrypto/environment/tz/inc', 
   '${INC_ROOT}/core/securemsm/unifiedcrypto/environment/tz/src',
   '${INC_ROOT}/core/securemsm/unifiedcrypto/environment/inc',     
   ])
if env.has_key('TZTESTEXEC_IMAGE'):
    env.PublishPrivateApi('UC_CORE_ECC', [
       '${INC_ROOT}/core/securemsm/unifiedcrypto/core/ecc/inc', 
       '${INC_ROOT}/core/securemsm/unifiedcrypto/shared/ecc/inc',
       '${INC_ROOT}/core/securemsm/unifiedcrypto/environment/tz/inc', 
       '${INC_ROOT}/core/securemsm/unifiedcrypto/environment/tz/src',
       '${INC_ROOT}/core/securemsm/unifiedcrypto/environment/inc',     
       ])
if env.has_key('CTZL_IMAGE'):
    env.PublishPrivateApi('UC_CORE_ECC', [
       '${INC_ROOT}/core/securemsm/unifiedcrypto/core/ecc/inc', 
       '${INC_ROOT}/core/securemsm/unifiedcrypto/shared/ecc/inc',
       '${INC_ROOT}/core/securemsm/unifiedcrypto/environment/sampleapp/inc', 
       '${INC_ROOT}/core/securemsm/unifiedcrypto/environment/sampleapp/src',
       '${INC_ROOT}/core/securemsm/unifiedcrypto/environment/inc',     
       ])
if env.has_key('CTZL64_IMAGE'):
    env.PublishPrivateApi('UC_CORE_ECC', [
       '${INC_ROOT}/core/securemsm/unifiedcrypto/core/ecc/inc', 
       '${INC_ROOT}/core/securemsm/unifiedcrypto/shared/ecc/inc',
       '${INC_ROOT}/core/securemsm/unifiedcrypto/environment/sampleapp/inc', 
       '${INC_ROOT}/core/securemsm/unifiedcrypto/environment/sampleapp/src',
       '${INC_ROOT}/core/securemsm/unifiedcrypto/environment/inc',     
       ])

#-------------------------------------------------------------------------------
# Sources, libraries
#-------------------------------------------------------------------------------

ECC_CORE_LIB_SOURCES = [
        '${BUILDPATH}/src/ecc_core.c',
]

#-------------------------------------------------------------------------------
# Add Libraries to image
#-------------------------------------------------------------------------------

env.AddBinaryLibrary(['TZOS_IMAGE','TZTESTEXEC_IMAGE','CTZL_IMAGE','CTZL64_IMAGE'], '${BUILDPATH}/ECCCORE', ECC_CORE_LIB_SOURCES)