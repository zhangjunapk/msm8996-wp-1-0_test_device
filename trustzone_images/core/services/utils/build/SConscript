#===============================================================================
#
# Utils Libs
#
# GENERAL DESCRIPTION
#    build script
#
# Copyright (c) 2009-2014 by QUALCOMM, Incorporated.
# All Rights Reserved.
# QUALCOMM Proprietary/GTDR
#
#-------------------------------------------------------------------------------
#
#  $Header: //source/qcom/qct/core/services/utils/conf/sconscript/amss/7x30/api/main/latest/SConscript#9 $
#  $DateTime: 2010/05/16 12:11:18 $
#  $Author: gparikh $
#  $Change: 1301208 $
#                      EDIT HISTORY FOR FILE
#
#  This section contains comments describing changes made to the module.
#  Notice that changes are listed in reverse chronological order.
#
# when       who     what, where, why
# --------   ---     ---------------------------------------------------------
# 01/28/14   sa      Added HDCPSRM_IMAGE
# 09\15\09   sri     Added new ince path AEESTD for Utils
#===============================================================================
Import('env')
env = env.Clone()


if env['MSM_ID'] in ['8956']:
   env.Append(CPPDEFINES = ["FEATURE_ML_TARGT_8956"])

#-------------------------------------------------------------------------------
# Source PATH
#-------------------------------------------------------------------------------
SRCPATH = "${BUILD_ROOT}/core/services/utils/src"

env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0)

#-------------------------------------------------------------------------------
# External depends within CoreBSP
#-------------------------------------------------------------------------------
env.RequireExternalApi([
   'BREW',
   'DSM',
   'CS',
   'MODEM_PMIC',
   'MULTIMEDIA_DISPLAY',
   'MODEM_DATA',
   'MODEM_HDR',
])

#-------------------------------------------------------------------------------
# Internal depends within CoreBSP
#-------------------------------------------------------------------------------
CBSP_API = [
   'BOOT',
   'DEBUGTOOLS',
   'HAL',
   'MPROC',
   'SERVICES',
   'STORAGE',
   'SYSTEMDRIVERS',
   'DAL',
   'MINK',

   # needs to be last also contains wrong comdef.h
   'KERNEL',
]

env.RequirePublicApi(CBSP_API)
env.RequireRestrictedApi(CBSP_API)
env.RequireRestrictedApi(['TZLIBARMV8', 'TZCHIPSET'])

env.PublishPrivateApi('SERVICES_UTILS', "${INC_ROOT}/core/services/utils/src")

#-------------------------------------------------------------------------------
# Sources, libraries
#-------------------------------------------------------------------------------
TOOLS_SOURCES = [
  '${BUILDPATH}/crc.c',
]

UTILS_SOURCES = [
   '${BUILDPATH}/bit.c',
   '${BUILDPATH}/cmd.c',
   '${BUILDPATH}/crc.c',
   '${BUILDPATH}/intconv.c',
   '${BUILDPATH}/md5c.c',
   '${BUILDPATH}/memheap.c',
   '${BUILDPATH}/misc.c',
   '${BUILDPATH}/queue.c',
   '${BUILDPATH}/qw.c',
   '${BUILDPATH}/ran.c'
]

UTILS_HEAP_SOURCES = [
   '${BUILDPATH}/amssheap.c'
]

UTILS_UMTS_SOURCES = [
   '${BUILDPATH}/sys_eplmn_list.c'
]

UTILS_APPS_THINUI_SOURCES = [
   '${BUILDPATH}/stubs_thin_ui.c'
]

UTILS_CPP_SOURCES = [
   '${BUILDPATH}/memutils.cpp'
]

UTILS_A_SOURCES = [
   '${BUILDPATH}/miscasm.s'
]

UTILS_TZ_SOURCES =  [
   '${BUILDPATH}/memheap_lite.c'
]

#-------------------------------------------------------------------------------
# Add Libraries to image
#-------------------------------------------------------------------------------

env.AddBinaryLibrary('TZOS_IMAGE', '${BUILDPATH}/Utils_tz', UTILS_TZ_SOURCES)

env.AddBinaryObject('CTZL_IMAGE', UTILS_TZ_SOURCES)
env.AddBinaryObject('CTZL64_IMAGE', UTILS_TZ_SOURCES)

env.AddBinaryObject('SECURITYTEST_IMAGE', UTILS_TZ_SOURCES)
env.AddBinaryObject('WINSECAPP_IMAGE', UTILS_TZ_SOURCES)
env.AddBinaryObject('SMPLSERV_IMAGE', UTILS_TZ_SOURCES)
env.AddBinaryObject('SMPLCERT_IMAGE', UTILS_TZ_SOURCES)
env.AddBinaryObject('UEFISECAPP_IMAGE', UTILS_TZ_SOURCES)
env.AddBinaryObject('HDCP2P2_IMAGE', UTILS_TZ_SOURCES)
env.AddBinaryObject('PLAYREADY_IMAGE', UTILS_TZ_SOURCES)
env.AddBinaryObject('WIDEVINE_IMAGE', UTILS_TZ_SOURCES)
env.AddBinaryObject('ISDBTMM_IMAGE', UTILS_TZ_SOURCES)
env.AddBinaryObject('DXHDCP2_IMAGE', UTILS_TZ_SOURCES)
env.AddBinaryObject('DXHDCP2DBG_IMAGE', UTILS_TZ_SOURCES)
env.AddBinaryObject('TOUCHSAMPLE_IMAGE', UTILS_TZ_SOURCES)
env.AddBinaryObject('SECURETOUCH_IMAGE', UTILS_TZ_SOURCES)
env.AddBinaryObject('HDCPSRM_IMAGE', UTILS_TZ_SOURCES)
env.AddBinaryObject('HYPERVISOR_IMAGE', UTILS_TZ_SOURCES)
env.AddBinaryObject('SSMAPP_IMAGE', UTILS_TZ_SOURCES)
# NOTE: for utils we need to return objs and not a lib, since ARM libs may overide
# some functionality. by returning obj we overide the libs functions even if
# they are included first in the link line
utils = env.Object([UTILS_SOURCES, UTILS_CPP_SOURCES, UTILS_A_SOURCES])
utils_heap = env.Object(UTILS_HEAP_SOURCES)


utils_umts = env.Library('${BUILDPATH}/utils_umts', UTILS_UMTS_SOURCES)

utils_objs = env.Object(TOOLS_SOURCES)
utils_tools = env.Library('${BUILDPATH}/utils_tools', utils_objs)

#-------------------------------------------------------------------------------
# Add Libraries to image
#-------------------------------------------------------------------------------

if "USES_CS_EARLY_INIT" not in env:
  env.AddLibsToImage(['MODEM_IMAGE'],[utils,utils_heap])
else:
  env.AddLibsToImage(['MODEM_IMAGE'],utils)

#unconditionally add amssheap to CBSP Modem image
env.AddLibsToImage(['CBSP_MODEM_IMAGE'],[utils,utils_heap])

if "USES_CS_EARLY_INIT" not in env:
  env.AddLibsToImage(['APPS_IMAGE'],[utils,utils_heap])
else:
  env.AddLibsToImage(['APPS_IMAGE'],utils)

#unconditionally add amssheap.o to CBSP Apps image
env.AddLibsToImage(['CBSP_APPS_IMAGE'],[utils,utils_heap])

env.AddLibsToImage(['NAND_TOOLS_IMAGE', 'HOSTDL_IMAGE', 'EHOSTDL_IMAGE', 'EMMCBLD_IMAGE',
   'NAND_TOOLS_EXE', 'DBL_BOOT_IMAGE', 'OSBL_BOOT_IMAGE', 'APPSBL_BOOT_IMAGE',
   'SPBL_BOOT_IMAGE', 'APPS_BOOT_2' ],
   utils_objs)
