#=============================================================================
# TLMM LIBRARY
#
# Target:    All
# Processor: All
#
#=============================================================================
# $Header: //components/rel/core.tz/1.0.3.c1/systemdrivers/tlmm/build/tlmm.scons#1 $
#=============================================================================
#  Copyright 2014-2015 QUALCOMM Technologies Incorporated.
#  All Rights Reserved.
#  QUALCOMM Proprietary/GTDR
#=============================================================================

import os

Import('env')
env = env.Clone()

#------------------------------------------------------------------------------
# Add API folders
#------------------------------------------------------------------------------
if os.path.isfile(env.subst('../config/${CHIPSET}/TLMMChipset.xml')):
   env.Replace(TLMM_CHIPSET = '${CHIPSET}')
else:
   env.Replace(TLMM_CHIPSET = 'stubs')

TLMM_API = [
   "${INC_ROOT}/core/systemdrivers/tlmm/inc",
   "${INC_ROOT}/core/api/systemdrivers/hwio/${TLMM_CHIPSET}",
   "${INC_ROOT}/core/systemdrivers/tlmm/config/${TLMM_CHIPSET}"
]

if env['TLMM_CHIPSET'] != 'stubs':
  TLMM_API.extend(["${INC_ROOT}/core/systemdrivers/tlmm/config"])
  
env.PublishPrivateApi("SYSTEMDRIVERS_TLMM", TLMM_API)

SRCPATH = "../"
env.VariantDir('${BUILDPATH}', SRCPATH, duplicate=0) 
SRCPATHSCRIPTS = env['BUILD_ROOT'] + '/core/systemdrivers/tlmm/scripts/'

#-------------------------------------------------------------------------------
# Internal depends within CoreBSP
#-------------------------------------------------------------------------------

env.Append(CPPPATH = [
   "${INC_ROOT}/core/systemdrivers/tlmm/src",
   "${INC_ROOT}/core/systemdrivers/tlmm/config",
   "${INC_ROOT}/core/systemdrivers/tlmm/config/${TLMM_CHIPSET}",
   "${INC_ROOT}/core/systemdrivers/tlmm/hw/v1"
])


#-------------------------------------------------------------------------------
# Internal depends within CoreBSP
#-------------------------------------------------------------------------------
CBSP_API = [
   'HAL',
   'SERVICES',
   'SYSTEMDRIVERS',
   'DAL',

   # needs to be last also contains wrong comdef.h
   'KERNEL',
]

env.RequirePublicApi(CBSP_API)
env.RequireRestrictedApi(CBSP_API)


#-------------------------------------------------------------------------------
# Sources, libraries
#-------------------------------------------------------------------------------


HAL_TLMM_V1_SOURCES =  [
   '${BUILDPATH}/hw/v1/HALtlmm.c'
]


haltlmm_v1_obj = env.Object(HAL_TLMM_V1_SOURCES)
haltlmm_v1_lib = env.Library('${BUILDPATH}/HALtlmmV1', haltlmm_v1_obj)



TLMM_COMMON_SOURCES =  [
   '${BUILDPATH}/src/Tlmm.c',
]


tlmm_obj = env.Object(TLMM_COMMON_SOURCES)
tlmm_lib = env.Library('${BUILDPATH}/Tlmm', tlmm_obj)


#-------------------------------------------------------------------------------
# Add Libraries to image
#-------------------------------------------------------------------------------

env.AddLibsToImage(['TZOS_IMAGE'], [tlmm_lib, haltlmm_v1_lib])


#---------------------------------------------------------------------------
# Invoke document generation SConscript
#---------------------------------------------------------------------------

if os.path.exists(env.subst('${BUILD_ROOT}/core/api/systemdrivers/docsrc/tlmm/SConscript')):
  env.SConscript(
    '${BUILD_ROOT}/core/api/systemdrivers/docsrc/tlmm/SConscript',
    exports='env')


#---------------------------------------------------------------------------
# Add DAL XML file
#---------------------------------------------------------------------------
if 'USES_DEVCFG' in env:
   DEVCFG_IMG = ['DAL_DEVCFG_OEM_QSEE_IMG']
   env.AddDevCfgInfo(DEVCFG_IMG, 
   {
       'devcfg_xml' : '${BUILD_ROOT}/core/systemdrivers/tlmm/config/${TLMM_CHIPSET}/TLMMChipset.xml'
   })



#-------------------------------------------------------------------------------
# Add CMM Scripts to T32 Menu
#-------------------------------------------------------------------------------

CMM_ARGUMENT = ''

try:
    env.AddCMMScripts ('TZ', [SRCPATHSCRIPTS], { 'tlmm_gpio_hw.cmm' : ['TLMM', CMM_ARGUMENT] }, 'SystemDrivers')
except:
  pass

